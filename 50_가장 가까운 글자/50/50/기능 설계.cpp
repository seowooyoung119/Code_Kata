
입력: 어떤 문자열 s

ex) banana

이때 각 글자들을 왼쪽->오른쪽으로 읽어나가기.

이후 진행.

<같은 글자가 없으면 - 1로 표시>

<같은 글자가 있을 때 : 앞에  N칸 앞이면 N칸 앞 표시>
<그러나 가장 가까운 값 1개만 최종 표시>

예시.

b는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없다. = -1 표시
a는 처음 나왔기 때문에 자신의 앞에 같은 글자가 없다. = -1 표시
n은 처음 나왔기 때문에 자신의 앞에 같은 글자가 없다. = -1 표시
a는 자신보다 두 칸 앞에 a가 있다. = 2로 표시.
n도 자신보다 두 칸 앞에 n이 있다. = 2로 표시.
a는 가장 가까운 두 칸 앞 표시. = 2로 표시.

제한 사항
- 소문자로만 이루어져 있다.
- 길이 : 1이상 10000이하.
//==============================================================//

기능 설계(아래)
//==============================================================//

영어는 총 a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z 26개로 이루어져 있다.


1. 어떤 문자열 S의 입력이 들어온다.


2. 필요한 데이터.
[문자열을 비교할 배열] >> 길어야 26개.
[이 문자열들이 몇 번째 자릿수에 있는 확인할 인덱스] >> 최대 10000 이하.
[답을 내기 위한 int 배열]

3. for문 돌리기(문자열의 s의 길이 만큼.)

4. 내부 기능
어떤 문자가 배열의 문자열과 같은게 있는지 확인하기.
- 없으면 이 문자의 인덱스와 문자값을 비교할 배열에 넣고 저장.이후 int 배열에 - 1 표시
- 있으면 이 문자의 인덱스와 문자값을 비교할 배열에서 문자 풀기.
1. 두 문자열의 인덱스 차이를 구한다.
2. 그 차이를 int 배열에 넣는다.
3. 가장 최신의 문자값과 인덱스를 오래된 문자값과 인덱스에 덮어씌운다.

5. for문이 끝나면 int 배열을 반환한다.

//==============================================================//
의사 코드(아래)
//==============================================================//

#include <string>
#include <vector>

using namespace std;

vector<int> soulution(string s)
{
	vector<int> answer;
	vector<pair<int, int>> compares;  // AI 도움 받음. 

	for (int i = 0; i < s.length(); ++i)
	{
		for (int j = 0; j < compares.size(); ++j)
		{
			// compare 함수 쓰려다가 못 씀 : AI 도움 받음.

			if (compares[j].first == s[i])
			{
				answer.push_back(compares[j].second - i);

				compares[j].second = i;
				compares[j].first = s[i];
				continue;
			}


		}

		answer.push_back(-1);
		compares.push_back({ s[i], i });
	}

	return answer;
}








